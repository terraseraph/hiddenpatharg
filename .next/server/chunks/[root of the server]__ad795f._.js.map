{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 63, "column": 0}, "map": {"version":3,"sources":["file://G%3A/_dev/hidden_path/arg-game/src/server/db.ts"],"sourcesContent":["import { PrismaClient } from \"@prisma/client\";\n\nconst globalForPrisma = globalThis as unknown as {\n  prisma: PrismaClient | undefined;\n};\n\nexport const prisma =\n  globalForPrisma.prisma ??\n  new PrismaClient({\n    log:\n      process.env.NODE_ENV === \"development\" ? [\"query\", \"error\", \"warn\"] : [\"error\"],\n  });\n\nif (process.env.NODE_ENV !== \"production\") globalForPrisma.prisma = prisma;\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,kBAAkB;AAIjB,MAAM,SACX,gBAAgB,MAAM,IACtB,IAAI,6HAAA,CAAA,eAAY,CAAC;IACf,KACE,uCAAyC;QAAC;QAAS;QAAS;KAAO;AACvE;AAEF,wCAA2C,gBAAgB,MAAM,GAAG"}},
    {"offset": {"line": 77, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 83, "column": 0}, "map": {"version":3,"sources":["file://G%3A/_dev/hidden_path/arg-game/src/app/api/teams/update/route.ts"],"sourcesContent":["import { NextResponse } from \"next/server\";\r\nimport { prisma } from \"~/server/db\";\r\nimport { z } from \"zod\";\r\n\r\nconst updateTeamSchema = z.object({\r\n    teamId: z.string().transform(val => parseInt(val)),\r\n    teamName: z.string().min(1),\r\n    players: z.string().transform(val =>\r\n        val.split(/\\n/)\r\n            .map(line => {\r\n                const [name, email, phone] = line.split(',').map(s => s.trim());\r\n                return { name, email, phone };\r\n            })\r\n            .filter(({ name, email }) => name && email)\r\n    ),\r\n});\r\n\r\nexport async function POST(req: Request) {\r\n    try {\r\n        const formData = await req.formData();\r\n        const data = Object.fromEntries(formData.entries());\r\n        const result = updateTeamSchema.safeParse(data);\r\n\r\n        if (!result.success) {\r\n            return NextResponse.json(\r\n                { error: \"Invalid input\", details: result.error.flatten() },\r\n                { status: 400 }\r\n            );\r\n        }\r\n\r\n        const { teamId, teamName, players } = result.data;\r\n\r\n        // Update the team\r\n        const team = await prisma.team.update({\r\n            where: { id: teamId },\r\n            data: {\r\n                name: teamName,\r\n                players: {\r\n                    deleteMany: {}, // Remove all existing players\r\n                    create: players.map(player => ({\r\n                        name: player.name,\r\n                        email: player.email,\r\n                        phone: player.phone || null,\r\n                        isTeamLeader: false, // Default to false for now\r\n                        details: null, // No details for now\r\n                    })),\r\n                },\r\n            },\r\n            include: {\r\n                players: true,\r\n                bookings: {\r\n                    include: {\r\n                        game: {\r\n                            select: {\r\n                                id: true,\r\n                                name: true,\r\n                            },\r\n                        },\r\n                        instance: {\r\n                            select: {\r\n                                id: true,\r\n                                startedAt: true,\r\n                                completedAt: true,\r\n                                currentPuzzleOrder: true,\r\n                            },\r\n                        },\r\n                    },\r\n                },\r\n            },\r\n        });\r\n\r\n        return NextResponse.json({ success: true, team });\r\n    } catch (err) {\r\n        console.error(\"Error updating team:\", err);\r\n        if (err instanceof Error) {\r\n            return NextResponse.json(\r\n                { error: err.message },\r\n                { status: 500 }\r\n            );\r\n        }\r\n        return NextResponse.json(\r\n            { error: \"Failed to update team\" },\r\n            { status: 500 }\r\n        );\r\n    }\r\n} "],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AAEA,MAAM,mBAAmB,sIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC9B,QAAQ,sIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,SAAS,CAAC,CAAA,MAAO,SAAS;IAC7C,UAAU,sIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC;IACzB,SAAS,sIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,SAAS,CAAC,CAAA,MAC1B,IAAI,KAAK,CAAC,MACL,GAAG,CAAC,CAAA;YACD,MAAM,CAAC,MAAM,OAAO,MAAM,GAAG,KAAK,KAAK,CAAC,KAAK,GAAG,CAAC,CAAA,IAAK,EAAE,IAAI;YAC5D,OAAO;gBAAE;gBAAM;gBAAO;YAAM;QAChC,GACC,MAAM,CAAC,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,GAAK,QAAQ;AAEjD;AAEO,eAAe,KAAK,GAAY;IACnC,IAAI;QACA,MAAM,WAAW,MAAM,IAAI,QAAQ;QACnC,MAAM,OAAO,OAAO,WAAW,CAAC,SAAS,OAAO;QAChD,MAAM,SAAS,iBAAiB,SAAS,CAAC;QAE1C,IAAI,CAAC,OAAO,OAAO,EAAE;YACjB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACpB;gBAAE,OAAO;gBAAiB,SAAS,OAAO,KAAK,CAAC,OAAO;YAAG,GAC1D;gBAAE,QAAQ;YAAI;QAEtB;QAEA,MAAM,EAAE,MAAM,EAAE,QAAQ,EAAE,OAAO,EAAE,GAAG,OAAO,IAAI;QAEjD,kBAAkB;QAClB,MAAM,OAAO,MAAM,qHAAA,CAAA,SAAM,CAAC,IAAI,CAAC,MAAM,CAAC;YAClC,OAAO;gBAAE,IAAI;YAAO;YACpB,MAAM;gBACF,MAAM;gBACN,SAAS;oBACL,YAAY,CAAC;oBACb,QAAQ,QAAQ,GAAG,CAAC,CAAA,SAAU,CAAC;4BAC3B,MAAM,OAAO,IAAI;4BACjB,OAAO,OAAO,KAAK;4BACnB,OAAO,OAAO,KAAK,IAAI;4BACvB,cAAc;4BACd,SAAS;wBACb,CAAC;gBACL;YACJ;YACA,SAAS;gBACL,SAAS;gBACT,UAAU;oBACN,SAAS;wBACL,MAAM;4BACF,QAAQ;gCACJ,IAAI;gCACJ,MAAM;4BACV;wBACJ;wBACA,UAAU;4BACN,QAAQ;gCACJ,IAAI;gCACJ,WAAW;gCACX,aAAa;gCACb,oBAAoB;4BACxB;wBACJ;oBACJ;gBACJ;YACJ;QACJ;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;YAAM;QAAK;IACnD,EAAE,OAAO,KAAK;QACV,QAAQ,KAAK,CAAC,wBAAwB;QACtC,IAAI,eAAe,OAAO;YACtB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACpB;gBAAE,OAAO,IAAI,OAAO;YAAC,GACrB;gBAAE,QAAQ;YAAI;QAEtB;QACA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACpB;YAAE,OAAO;QAAwB,GACjC;YAAE,QAAQ;QAAI;IAEtB;AACJ"}},
    {"offset": {"line": 178, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}