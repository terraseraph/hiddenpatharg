{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 63, "column": 0}, "map": {"version":3,"sources":["file://G%3A/_dev/hidden_path/arg-game/src/server/db.ts"],"sourcesContent":["import { PrismaClient } from \"@prisma/client\";\n\nconst globalForPrisma = globalThis as unknown as {\n  prisma: PrismaClient | undefined;\n};\n\nexport const prisma =\n  globalForPrisma.prisma ??\n  new PrismaClient({\n    log:\n      process.env.NODE_ENV === \"development\" ? [\"query\", \"error\", \"warn\"] : [\"error\"],\n  });\n\nif (process.env.NODE_ENV !== \"production\") globalForPrisma.prisma = prisma;\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,kBAAkB;AAIjB,MAAM,SACX,gBAAgB,MAAM,IACtB,IAAI,6HAAA,CAAA,eAAY,CAAC;IACf,KACE,uCAAyC;QAAC;QAAS;QAAS;KAAO;AACvE;AAEF,wCAA2C,gBAAgB,MAAM,GAAG"}},
    {"offset": {"line": 77, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 83, "column": 0}, "map": {"version":3,"sources":["file://G%3A/_dev/hidden_path/arg-game/src/app/api/bookings/%5BbookingId%5D/route.ts"],"sourcesContent":["import { NextResponse } from \"next/server\";\r\nimport { prisma } from \"~/server/db\";\r\nimport { z } from \"zod\";\r\n\r\nconst updateBookingSchema = z.object({\r\n    teamId: z.number(),\r\n    gameId: z.number(),\r\n    startTime: z.string().datetime().nullable(),\r\n    expiresAt: z.string().datetime().nullable(),\r\n    voucher: z.string().nullable(),\r\n    paid: z.boolean(),\r\n    notes: z.string().nullable(),\r\n});\r\n\r\ntype UpdateBookingInput = z.infer<typeof updateBookingSchema>;\r\n\r\nexport async function DELETE(\r\n    req: Request,\r\n    { params }: { params: { bookingId: string } }\r\n) {\r\n    try {\r\n        const bookingId = parseInt(params.bookingId);\r\n        if (isNaN(bookingId)) {\r\n            return NextResponse.json(\r\n                { error: \"Invalid booking ID\" },\r\n                { status: 400 }\r\n            );\r\n        }\r\n\r\n        await prisma.booking.delete({\r\n            where: { id: bookingId },\r\n        });\r\n\r\n        return NextResponse.json({ success: true });\r\n    } catch (err) {\r\n        console.error(\"Error deleting booking:\", err);\r\n        if (err instanceof Error) {\r\n            return NextResponse.json(\r\n                { error: err.message },\r\n                { status: 500 }\r\n            );\r\n        }\r\n        return NextResponse.json(\r\n            { error: \"Failed to delete booking\" },\r\n            { status: 500 }\r\n        );\r\n    }\r\n}\r\n\r\nexport async function GET(\r\n    req: Request,\r\n    { params }: { params: { bookingId: string } }\r\n) {\r\n    try {\r\n        const bookingId = parseInt(params.bookingId);\r\n        if (isNaN(bookingId)) {\r\n            return NextResponse.json(\r\n                { error: \"Invalid booking ID\" },\r\n                { status: 400 }\r\n            );\r\n        }\r\n\r\n        const booking = await prisma.booking.findUnique({\r\n            where: { id: bookingId },\r\n            include: {\r\n                team: {\r\n                    select: {\r\n                        id: true,\r\n                        name: true,\r\n                    },\r\n                },\r\n                game: {\r\n                    select: {\r\n                        id: true,\r\n                        name: true,\r\n                    },\r\n                },\r\n            },\r\n        });\r\n\r\n        if (!booking) {\r\n            return NextResponse.json(\r\n                { error: \"Booking not found\" },\r\n                { status: 404 }\r\n            );\r\n        }\r\n\r\n        return NextResponse.json({ booking });\r\n    } catch (err) {\r\n        console.error(\"Error fetching booking:\", err);\r\n        if (err instanceof Error) {\r\n            return NextResponse.json(\r\n                { error: err.message },\r\n                { status: 500 }\r\n            );\r\n        }\r\n        return NextResponse.json(\r\n            { error: \"Failed to fetch booking\" },\r\n            { status: 500 }\r\n        );\r\n    }\r\n}\r\n\r\nexport async function PATCH(\r\n    req: Request,\r\n    { params }: { params: { bookingId: string } }\r\n) {\r\n    try {\r\n        const bookingId = parseInt(params.bookingId);\r\n        if (isNaN(bookingId)) {\r\n            return NextResponse.json(\r\n                { error: \"Invalid booking ID\" },\r\n                { status: 400 }\r\n            );\r\n        }\r\n\r\n        const body = (await req.json()) as UpdateBookingInput;\r\n        const result = updateBookingSchema.safeParse(body);\r\n\r\n        if (!result.success) {\r\n            return NextResponse.json(\r\n                { error: \"Invalid input\", details: result.error.flatten() },\r\n                { status: 400 }\r\n            );\r\n        }\r\n\r\n        const { teamId, gameId, startTime, expiresAt, voucher, paid, notes } = result.data;\r\n\r\n        const booking = await prisma.booking.update({\r\n            where: { id: bookingId },\r\n            data: {\r\n                team: { connect: { id: teamId } },\r\n                game: { connect: { id: gameId } },\r\n                startTime: startTime ? new Date(startTime) : null,\r\n                expiresAt: expiresAt ? new Date(expiresAt) : null,\r\n                voucher,\r\n                paid,\r\n                notes,\r\n            },\r\n            include: {\r\n                team: {\r\n                    select: {\r\n                        name: true,\r\n                    },\r\n                },\r\n                game: {\r\n                    select: {\r\n                        name: true,\r\n                    },\r\n                },\r\n            },\r\n        });\r\n\r\n        return NextResponse.json({ booking });\r\n    } catch (err) {\r\n        console.error(\"Error updating booking:\", err);\r\n        if (err instanceof Error) {\r\n            return NextResponse.json(\r\n                { error: err.message },\r\n                { status: 500 }\r\n            );\r\n        }\r\n        return NextResponse.json(\r\n            { error: \"Failed to update booking\" },\r\n            { status: 500 }\r\n        );\r\n    }\r\n} "],"names":[],"mappings":"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"}},
    {"offset": {"line": 266, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}