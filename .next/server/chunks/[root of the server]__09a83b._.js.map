{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 63, "column": 0}, "map": {"version":3,"sources":["file://G%3A/_dev/hidden_path/arg-game/src/server/db.ts"],"sourcesContent":["import { PrismaClient } from \"@prisma/client\";\n\nconst globalForPrisma = globalThis as unknown as {\n  prisma: PrismaClient | undefined;\n};\n\nexport const prisma =\n  globalForPrisma.prisma ??\n  new PrismaClient({\n    log:\n      process.env.NODE_ENV === \"development\" ? [\"query\", \"error\", \"warn\"] : [\"error\"],\n  });\n\nif (process.env.NODE_ENV !== \"production\") globalForPrisma.prisma = prisma;\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,kBAAkB;AAIjB,MAAM,SACX,gBAAgB,MAAM,IACtB,IAAI,6HAAA,CAAA,eAAY,CAAC;IACf,KACE,uCAAyC;QAAC;QAAS;QAAS;KAAO;AACvE;AAEF,wCAA2C,gBAAgB,MAAM,GAAG"}},
    {"offset": {"line": 77, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 91, "column": 0}, "map": {"version":3,"sources":["file://G%3A/_dev/hidden_path/arg-game/src/app/api/teams/route.ts"],"sourcesContent":["import { NextResponse } from \"next/server\";\r\nimport { prisma } from \"~/server/db\";\r\nimport { nanoid } from \"nanoid\";\r\nimport { z } from \"zod\";\r\n\r\nconst createTeamSchema = z.object({\r\n    name: z.string().min(1),\r\n    playerEmails: z.array(z.string().email()),\r\n});\r\n\r\nexport async function GET() {\r\n    try {\r\n        const teams = await prisma.team.findMany({\r\n            include: {\r\n                game: {\r\n                    select: {\r\n                        id: true,\r\n                        name: true,\r\n                    },\r\n                },\r\n                users: {\r\n                    select: {\r\n                        id: true,\r\n                        email: true,\r\n                    },\r\n                },\r\n            },\r\n            orderBy: {\r\n                id: 'desc',\r\n            },\r\n        });\r\n\r\n        return NextResponse.json({ teams });\r\n    } catch (err) {\r\n        console.error(\"Error fetching teams:\", err);\r\n        if (err instanceof Error) {\r\n            return NextResponse.json(\r\n                { error: err.message },\r\n                { status: 500 }\r\n            );\r\n        }\r\n        return NextResponse.json(\r\n            { error: \"Failed to fetch teams\" },\r\n            { status: 500 }\r\n        );\r\n    }\r\n}\r\n\r\nexport async function POST(req: Request) {\r\n    try {\r\n        const body = await req.json();\r\n        const result = createTeamSchema.safeParse(body);\r\n\r\n        if (!result.success) {\r\n            return NextResponse.json(\r\n                { error: \"Invalid input\", details: result.error.flatten() },\r\n                { status: 400 }\r\n            );\r\n        }\r\n\r\n        const { name, playerEmails } = result.data;\r\n\r\n        // Generate a unique team code\r\n        const teamCode = nanoid(6).toUpperCase();\r\n\r\n        // Create or get users from emails\r\n        const users = await Promise.all(\r\n            playerEmails.map(async (email) => {\r\n                return prisma.user.upsert({\r\n                    where: { email },\r\n                    update: {},\r\n                    create: { email },\r\n                });\r\n            })\r\n        );\r\n\r\n        // Create the team without a game connection\r\n        const team = await prisma.team.create({\r\n            data: {\r\n                name,\r\n                code: teamCode,\r\n                users: {\r\n                    connect: users.map(user => ({ id: user.id })),\r\n                },\r\n            },\r\n            include: {\r\n                users: {\r\n                    select: {\r\n                        id: true,\r\n                        email: true,\r\n                    },\r\n                },\r\n            },\r\n        });\r\n\r\n        return NextResponse.json({\r\n            teamCode,\r\n            team: {\r\n                id: team.id,\r\n                name: team.name,\r\n                code: team.code,\r\n                users: team.users,\r\n            },\r\n        });\r\n    } catch (err) {\r\n        console.error(\"Error creating team:\", err);\r\n        if (err instanceof Error) {\r\n            return NextResponse.json(\r\n                { error: err.message },\r\n                { status: 500 }\r\n            );\r\n        }\r\n        return NextResponse.json(\r\n            { error: \"Failed to create team\" },\r\n            { status: 500 }\r\n        );\r\n    }\r\n} "],"names":[],"mappings":"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"}},
    {"offset": {"line": 219, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}