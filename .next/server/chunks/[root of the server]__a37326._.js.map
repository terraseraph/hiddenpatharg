{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 63, "column": 0}, "map": {"version":3,"sources":["file://G%3A/_dev/hidden_path/arg-game/src/server/db.ts"],"sourcesContent":["import { PrismaClient } from \"@prisma/client\";\n\nconst globalForPrisma = globalThis as unknown as {\n  prisma: PrismaClient | undefined;\n};\n\nexport const prisma =\n  globalForPrisma.prisma ??\n  new PrismaClient({\n    log:\n      process.env.NODE_ENV === \"development\" ? [\"query\", \"error\", \"warn\"] : [\"error\"],\n  });\n\nif (process.env.NODE_ENV !== \"production\") globalForPrisma.prisma = prisma;\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,kBAAkB;AAIjB,MAAM,SACX,gBAAgB,MAAM,IACtB,IAAI,6HAAA,CAAA,eAAY,CAAC;IACf,KACE,uCAAyC;QAAC;QAAS;QAAS;KAAO;AACvE;AAEF,wCAA2C,gBAAgB,MAAM,GAAG"}},
    {"offset": {"line": 77, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 83, "column": 0}, "map": {"version":3,"sources":["file://G%3A/_dev/hidden_path/arg-game/src/app/api/teams/route.ts"],"sourcesContent":["import { NextResponse } from \"next/server\";\r\nimport { prisma } from \"~/server/db\";\r\nimport { z } from \"zod\";\r\nimport { Player } from \"~/types/team\";\r\n\r\nconst createTeamSchema = z.object({\r\n    name: z.string().min(1),\r\n    players: z.array(z.object({\r\n        name: z.string().min(1),\r\n        email: z.string().email(),\r\n        phone: z.string().nullable(),\r\n        isTeamLeader: z.boolean(),\r\n        details: z.record(z.unknown()).nullable(),\r\n    })),\r\n});\r\n\r\nexport async function GET() {\r\n    try {\r\n        const teams = await prisma.team.findMany({\r\n            select: {\r\n                id: true,\r\n                name: true,\r\n                players: true,\r\n                bookings: {\r\n                    select: {\r\n                        id: true,\r\n                        code: true,\r\n                        gameId: true,\r\n                        game: {\r\n                            select: {\r\n                                name: true,\r\n                            },\r\n                        },\r\n                        createdAt: true,\r\n                        expiresAt: true,\r\n                    },\r\n                },\r\n            },\r\n            orderBy: {\r\n                id: 'desc',\r\n            },\r\n        });\r\n\r\n        // Parse players JSON for each team\r\n        const teamsWithParsedPlayers = teams.map(team => ({\r\n            ...team,\r\n            players: JSON.parse(team.players) as Player[],\r\n        }));\r\n\r\n        return NextResponse.json({ teams: teamsWithParsedPlayers });\r\n    } catch (err) {\r\n        console.error(\"Error fetching teams:\", err);\r\n        if (err instanceof Error) {\r\n            return NextResponse.json(\r\n                { error: err.message },\r\n                { status: 500 }\r\n            );\r\n        }\r\n        return NextResponse.json(\r\n            { error: \"Failed to fetch teams\" },\r\n            { status: 500 }\r\n        );\r\n    }\r\n}\r\n\r\nexport async function POST(req: Request) {\r\n    try {\r\n        const body = await req.json();\r\n        const result = createTeamSchema.safeParse(body);\r\n\r\n        if (!result.success) {\r\n            return NextResponse.json(\r\n                { error: \"Invalid input\", details: result.error.flatten() },\r\n                { status: 400 }\r\n            );\r\n        }\r\n\r\n        const { name, players } = result.data;\r\n\r\n        // Create the team with players as JSON\r\n        const team = await prisma.team.create({\r\n            data: {\r\n                name,\r\n                players: JSON.stringify(players.map((player, index) => ({\r\n                    id: index + 1, // Generate sequential IDs for new players\r\n                    name: player.name,\r\n                    email: player.email,\r\n                    phone: player.phone,\r\n                    isTeamLeader: player.isTeamLeader,\r\n                    details: player.details,\r\n                }))),\r\n            },\r\n            select: {\r\n                id: true,\r\n                name: true,\r\n                players: true,\r\n                bookings: {\r\n                    select: {\r\n                        id: true,\r\n                        code: true,\r\n                        gameId: true,\r\n                        game: {\r\n                            select: {\r\n                                name: true,\r\n                            },\r\n                        },\r\n                        createdAt: true,\r\n                        expiresAt: true,\r\n                    },\r\n                },\r\n            },\r\n        });\r\n\r\n        return NextResponse.json({\r\n            team: {\r\n                ...team,\r\n                players: JSON.parse(team.players) as Player[],\r\n            }\r\n        });\r\n    } catch (err) {\r\n        console.error(\"Error creating team:\", err);\r\n        if (err instanceof Error) {\r\n            return NextResponse.json(\r\n                { error: err.message },\r\n                { status: 500 }\r\n            );\r\n        }\r\n        return NextResponse.json(\r\n            { error: \"Failed to create team\" },\r\n            { status: 500 }\r\n        );\r\n    }\r\n} "],"names":[],"mappings":"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"}},
    {"offset": {"line": 221, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}