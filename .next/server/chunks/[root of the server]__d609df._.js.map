{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 63, "column": 0}, "map": {"version":3,"sources":["file://G%3A/_dev/hidden_path/arg-game/src/server/db.ts"],"sourcesContent":["import { PrismaClient } from \"@prisma/client\";\n\nconst globalForPrisma = globalThis as unknown as {\n  prisma: PrismaClient | undefined;\n};\n\nexport const prisma =\n  globalForPrisma.prisma ??\n  new PrismaClient({\n    log:\n      process.env.NODE_ENV === \"development\" ? [\"query\", \"error\", \"warn\"] : [\"error\"],\n  });\n\nif (process.env.NODE_ENV !== \"production\") globalForPrisma.prisma = prisma;\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,kBAAkB;AAIjB,MAAM,SACX,gBAAgB,MAAM,IACtB,IAAI,6HAAA,CAAA,eAAY,CAAC;IACf,KACE,uCAAyC;QAAC;QAAS;QAAS;KAAO;AACvE;AAEF,wCAA2C,gBAAgB,MAAM,GAAG"}},
    {"offset": {"line": 77, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 83, "column": 0}, "map": {"version":3,"sources":["file://G%3A/_dev/hidden_path/arg-game/src/utils/booking-code.ts"],"sourcesContent":["import { prisma } from \"~/server/db\";\r\n\r\n// Characters to use for generating codes (excluding similar looking characters)\r\nexport const CODE_CHARS = \"23456789ABCDEFGHJKLMNPQRSTUVWXYZ\";\r\nexport const CODE_LENGTH = 6;\r\n\r\n/**\r\n * Generates a unique booking code for a team's game session\r\n * Format: XXXXXX (6 characters total)\r\n */\r\nexport async function generateUniqueBookingCode(): Promise<string> {\r\n    let attempts = 0;\r\n    const maxAttempts = 10;\r\n\r\n    while (attempts < maxAttempts) {\r\n        // Generate a random code\r\n        let code = \"\";\r\n        for (let i = 0; i < CODE_LENGTH; i++) {\r\n            code += CODE_CHARS.charAt(Math.floor(Math.random() * CODE_CHARS.length));\r\n        }\r\n\r\n        // Check if code exists\r\n        const existing = await prisma.booking.findUnique({\r\n            where: { code },\r\n        });\r\n\r\n        if (!existing) {\r\n            return code;\r\n        }\r\n\r\n        attempts++;\r\n    }\r\n\r\n    throw new Error(\"Could not generate unique booking code after multiple attempts\");\r\n}\r\n\r\n/**\r\n * Validates a booking code format.\r\n * Booking codes are uppercase alphanumeric strings of 6 characters.\r\n * Input is converted to uppercase before validation.\r\n */\r\nexport function isValidBookingCode(code: string): boolean {\r\n    const upperCode = code.toUpperCase();\r\n    return /^[A-Z0-9]{6}$/.test(upperCode);\r\n}\r\n\r\n/**\r\n * Formats a raw code string into the standard format (XXXXXX)\r\n * @throws Error if code contains invalid characters or length\r\n */\r\nexport function formatBookingCode(code: string): string {\r\n    // Convert to uppercase and remove any non-alphanumeric characters\r\n    const cleaned = code.toUpperCase().replace(/[^A-Z0-9]/g, \"\");\r\n\r\n    // Check if all characters are valid\r\n    const validChars = new RegExp(`^[${CODE_CHARS}]{${CODE_LENGTH}}$`);\r\n    if (!validChars.test(cleaned)) {\r\n        throw new Error(\"Code contains invalid characters or incorrect length\");\r\n    }\r\n\r\n    return cleaned;\r\n} "],"names":[],"mappings":";;;;;;;AAAA;;AAGO,MAAM,aAAa;AACnB,MAAM,cAAc;AAMpB,eAAe;IAClB,IAAI,WAAW;IACf,MAAM,cAAc;IAEpB,MAAO,WAAW,YAAa;QAC3B,yBAAyB;QACzB,IAAI,OAAO;QACX,IAAK,IAAI,IAAI,GAAG,IAAI,aAAa,IAAK;YAClC,QAAQ,WAAW,MAAM,CAAC,KAAK,KAAK,CAAC,KAAK,MAAM,KAAK,WAAW,MAAM;QAC1E;QAEA,uBAAuB;QACvB,MAAM,WAAW,MAAM,qHAAA,CAAA,SAAM,CAAC,OAAO,CAAC,UAAU,CAAC;YAC7C,OAAO;gBAAE;YAAK;QAClB;QAEA,IAAI,CAAC,UAAU;YACX,OAAO;QACX;QAEA;IACJ;IAEA,MAAM,IAAI,MAAM;AACpB;AAOO,SAAS,mBAAmB,IAAY;IAC3C,MAAM,YAAY,KAAK,WAAW;IAClC,OAAO,gBAAgB,IAAI,CAAC;AAChC;AAMO,SAAS,kBAAkB,IAAY;IAC1C,kEAAkE;IAClE,MAAM,UAAU,KAAK,WAAW,GAAG,OAAO,CAAC,cAAc;IAEzD,oCAAoC;IACpC,MAAM,aAAa,IAAI,OAAO,CAAC,EAAE,EAAE,WAAW,EAAE,EAAE,YAAY,EAAE,CAAC;IACjE,IAAI,CAAC,WAAW,IAAI,CAAC,UAAU;QAC3B,MAAM,IAAI,MAAM;IACpB;IAEA,OAAO;AACX"}},
    {"offset": {"line": 130, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 136, "column": 0}, "map": {"version":3,"sources":["file://G%3A/_dev/hidden_path/arg-game/src/app/api/login/route.ts"],"sourcesContent":["import { NextResponse } from \"next/server\";\r\nimport { prisma } from \"~/server/db\";\r\nimport { isValidBookingCode } from \"~/utils/booking-code\";\r\n\r\nexport async function POST(request: Request) {\r\n    try {\r\n        const { code } = await request.json();\r\n\r\n        if (!code || !isValidBookingCode(code)) {\r\n            return NextResponse.json(\r\n                { error: \"Invalid booking code format\" },\r\n                { status: 400 }\r\n            );\r\n        }\r\n\r\n        // Find the booking and related data\r\n        const booking = await prisma.booking.findUnique({\r\n            where: { code },\r\n            include: {\r\n                team: {\r\n                    select: {\r\n                        id: true,\r\n                        name: true,\r\n                        players: true,\r\n                    },\r\n                },\r\n                game: {\r\n                    include: {\r\n                        puzzles: {\r\n                            orderBy: { order: \"asc\" },\r\n                        },\r\n                    },\r\n                },\r\n                instance: true,\r\n            },\r\n        });\r\n        console.log(\"ðŸš€============== ~ file: route.ts:37 ~ POST ~ booking================\", booking)\r\n\r\n        if (!booking) {\r\n            return NextResponse.json(\r\n                { error: \"Invalid booking code\" },\r\n                { status: 400 }\r\n            );\r\n        }\r\n\r\n        if (booking.expiresAt && new Date(booking.expiresAt) < new Date()) {\r\n            return NextResponse.json(\r\n                { error: \"This booking has expired\" },\r\n                { status: 400 }\r\n            );\r\n        }\r\n\r\n        // Create or get game instance\r\n        let gameInstance = booking.instance;\r\n        if (!gameInstance) {\r\n            gameInstance = await prisma.gameInstance.create({\r\n                data: {\r\n                    teamId: booking.teamId,\r\n                    gameId: booking.gameId,\r\n                    bookingId: booking.id,\r\n                    currentPuzzleOrder: 1,\r\n                },\r\n            });\r\n        }\r\n\r\n        // Parse team players\r\n        const team = {\r\n            ...booking.team,\r\n            players: JSON.parse(booking.team.players),\r\n        };\r\n\r\n        // Redirect to game info page\r\n        // return a response with the booking data\r\n        return NextResponse.json({ success: true, booking, gameInstance, team });\r\n    } catch (error) {\r\n        console.error(\"Login error:\", error);\r\n        return NextResponse.json(\r\n            { error: \"An error occurred\" },\r\n            { status: 500 }\r\n        );\r\n    }\r\n} "],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AAEO,eAAe,KAAK,OAAgB;IACvC,IAAI;QACA,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,QAAQ,IAAI;QAEnC,IAAI,CAAC,QAAQ,CAAC,CAAA,GAAA,iIAAA,CAAA,qBAAkB,AAAD,EAAE,OAAO;YACpC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACpB;gBAAE,OAAO;YAA8B,GACvC;gBAAE,QAAQ;YAAI;QAEtB;QAEA,oCAAoC;QACpC,MAAM,UAAU,MAAM,qHAAA,CAAA,SAAM,CAAC,OAAO,CAAC,UAAU,CAAC;YAC5C,OAAO;gBAAE;YAAK;YACd,SAAS;gBACL,MAAM;oBACF,QAAQ;wBACJ,IAAI;wBACJ,MAAM;wBACN,SAAS;oBACb;gBACJ;gBACA,MAAM;oBACF,SAAS;wBACL,SAAS;4BACL,SAAS;gCAAE,OAAO;4BAAM;wBAC5B;oBACJ;gBACJ;gBACA,UAAU;YACd;QACJ;QACA,QAAQ,GAAG,CAAC,yEAAyE;QAErF,IAAI,CAAC,SAAS;YACV,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACpB;gBAAE,OAAO;YAAuB,GAChC;gBAAE,QAAQ;YAAI;QAEtB;QAEA,IAAI,QAAQ,SAAS,IAAI,IAAI,KAAK,QAAQ,SAAS,IAAI,IAAI,QAAQ;YAC/D,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACpB;gBAAE,OAAO;YAA2B,GACpC;gBAAE,QAAQ;YAAI;QAEtB;QAEA,8BAA8B;QAC9B,IAAI,eAAe,QAAQ,QAAQ;QACnC,IAAI,CAAC,cAAc;YACf,eAAe,MAAM,qHAAA,CAAA,SAAM,CAAC,YAAY,CAAC,MAAM,CAAC;gBAC5C,MAAM;oBACF,QAAQ,QAAQ,MAAM;oBACtB,QAAQ,QAAQ,MAAM;oBACtB,WAAW,QAAQ,EAAE;oBACrB,oBAAoB;gBACxB;YACJ;QACJ;QAEA,qBAAqB;QACrB,MAAM,OAAO;YACT,GAAG,QAAQ,IAAI;YACf,SAAS,KAAK,KAAK,CAAC,QAAQ,IAAI,CAAC,OAAO;QAC5C;QAEA,6BAA6B;QAC7B,0CAA0C;QAC1C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;YAAM;YAAS;YAAc;QAAK;IAC1E,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,gBAAgB;QAC9B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACpB;YAAE,OAAO;QAAoB,GAC7B;YAAE,QAAQ;QAAI;IAEtB;AACJ"}},
    {"offset": {"line": 229, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}