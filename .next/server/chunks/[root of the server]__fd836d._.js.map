{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 71, "column": 0}, "map": {"version":3,"sources":["file://G%3A/_dev/hidden_path/arg-game/src/app/api/assets/upload/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\r\nimport { writeFile, mkdir } from \"fs/promises\";\r\nimport path from \"path\";\r\n\r\nexport async function POST(request: NextRequest) {\r\n    try {\r\n        const formData = await request.formData();\r\n        const file = formData.get(\"file\") as File;\r\n        const type = formData.get(\"type\") as string;\r\n\r\n        if (!file) {\r\n            return NextResponse.json(\r\n                { error: \"No file uploaded\" },\r\n                { status: 400 }\r\n            );\r\n        }\r\n\r\n        if (![\"image\", \"audio\", \"video\"].includes(type)) {\r\n            return NextResponse.json(\r\n                { error: \"Invalid asset type\" },\r\n                { status: 400 }\r\n            );\r\n        }\r\n\r\n        const bytes = await file.arrayBuffer();\r\n        const buffer = Buffer.from(bytes);\r\n\r\n        // Create directory if it doesn't exist\r\n        const dir = path.join(process.cwd(), \"public\", \"assets\", type);\r\n        await mkdir(dir, { recursive: true });\r\n        const filePath = path.join(dir, file.name);\r\n\r\n        await writeFile(filePath, buffer);\r\n\r\n        return NextResponse.json({\r\n            success: true,\r\n            file: {\r\n                name: file.name,\r\n                type,\r\n                url: `/assets/${type}/${file.name}`,\r\n            }\r\n        });\r\n    } catch (error) {\r\n        console.error(\"Error uploading file:\", error);\r\n        return NextResponse.json(\r\n            { error: \"Error uploading file\" },\r\n            { status: 500 }\r\n        );\r\n    }\r\n} "],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AAEO,eAAe,KAAK,OAAoB;IAC3C,IAAI;QACA,MAAM,WAAW,MAAM,QAAQ,QAAQ;QACvC,MAAM,OAAO,SAAS,GAAG,CAAC;QAC1B,MAAM,OAAO,SAAS,GAAG,CAAC;QAE1B,IAAI,CAAC,MAAM;YACP,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACpB;gBAAE,OAAO;YAAmB,GAC5B;gBAAE,QAAQ;YAAI;QAEtB;QAEA,IAAI,CAAC;YAAC;YAAS;YAAS;SAAQ,CAAC,QAAQ,CAAC,OAAO;YAC7C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACpB;gBAAE,OAAO;YAAqB,GAC9B;gBAAE,QAAQ;YAAI;QAEtB;QAEA,MAAM,QAAQ,MAAM,KAAK,WAAW;QACpC,MAAM,SAAS,OAAO,IAAI,CAAC;QAE3B,uCAAuC;QACvC,MAAM,MAAM,iGAAA,CAAA,UAAI,CAAC,IAAI,CAAC,QAAQ,GAAG,IAAI,UAAU,UAAU;QACzD,MAAM,CAAA,GAAA,qHAAA,CAAA,QAAK,AAAD,EAAE,KAAK;YAAE,WAAW;QAAK;QACnC,MAAM,WAAW,iGAAA,CAAA,UAAI,CAAC,IAAI,CAAC,KAAK,KAAK,IAAI;QAEzC,MAAM,CAAA,GAAA,qHAAA,CAAA,YAAS,AAAD,EAAE,UAAU;QAE1B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACrB,SAAS;YACT,MAAM;gBACF,MAAM,KAAK,IAAI;gBACf;gBACA,KAAK,CAAC,QAAQ,EAAE,KAAK,CAAC,EAAE,KAAK,IAAI,EAAE;YACvC;QACJ;IACJ,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,yBAAyB;QACvC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACpB;YAAE,OAAO;QAAuB,GAChC;YAAE,QAAQ;QAAI;IAEtB;AACJ"}},
    {"offset": {"line": 129, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}