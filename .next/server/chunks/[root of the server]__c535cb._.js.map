{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 63, "column": 0}, "map": {"version":3,"sources":["file://G%3A/_dev/hidden_path/arg-game/src/server/db.ts"],"sourcesContent":["import { PrismaClient } from \"@prisma/client\";\n\nconst globalForPrisma = globalThis as unknown as {\n  prisma: PrismaClient | undefined;\n};\n\nexport const prisma =\n  globalForPrisma.prisma ??\n  new PrismaClient({\n    log:\n      process.env.NODE_ENV === \"development\" ? [\"query\", \"error\", \"warn\"] : [\"error\"],\n  });\n\nif (process.env.NODE_ENV !== \"production\") globalForPrisma.prisma = prisma;\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,kBAAkB;AAIjB,MAAM,SACX,gBAAgB,MAAM,IACtB,IAAI,6HAAA,CAAA,eAAY,CAAC;IACf,KACE,uCAAyC;QAAC;QAAS;QAAS;KAAO;AACvE;AAEF,wCAA2C,gBAAgB,MAAM,GAAG"}},
    {"offset": {"line": 77, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 83, "column": 0}, "map": {"version":3,"sources":["file://G%3A/_dev/hidden_path/arg-game/src/utils/booking-code.ts"],"sourcesContent":["import { prisma } from \"~/server/db\";\r\n\r\n// Characters to use for generating codes (excluding similar looking characters)\r\nexport const CODE_CHARS = \"23456789ABCDEFGHJKLMNPQRSTUVWXYZ\";\r\nexport const CODE_LENGTH = 6;\r\n\r\n/**\r\n * Generates a unique booking code for a team's game session\r\n * Format: XXXXXX (6 characters total)\r\n */\r\nexport async function generateUniqueBookingCode(): Promise<string> {\r\n    let attempts = 0;\r\n    const maxAttempts = 10;\r\n\r\n    while (attempts < maxAttempts) {\r\n        // Generate a random code\r\n        let code = \"\";\r\n        for (let i = 0; i < CODE_LENGTH; i++) {\r\n            code += CODE_CHARS.charAt(Math.floor(Math.random() * CODE_CHARS.length));\r\n        }\r\n\r\n        // Check if code exists\r\n        const existing = await prisma.booking.findUnique({\r\n            where: { code },\r\n        });\r\n\r\n        if (!existing) {\r\n            return code;\r\n        }\r\n\r\n        attempts++;\r\n    }\r\n\r\n    throw new Error(\"Could not generate unique booking code after multiple attempts\");\r\n}\r\n\r\n/**\r\n * Validates a booking code format.\r\n * Booking codes are uppercase alphanumeric strings of 6 characters.\r\n * Input is converted to uppercase before validation.\r\n */\r\nexport function isValidBookingCode(code: string): boolean {\r\n    const upperCode = code.toUpperCase();\r\n    return /^[A-Z0-9]{6}$/.test(upperCode);\r\n}\r\n\r\n/**\r\n * Formats a raw code string into the standard format (XXXXXX)\r\n * @throws Error if code contains invalid characters or length\r\n */\r\nexport function formatBookingCode(code: string): string {\r\n    // Convert to uppercase and remove any non-alphanumeric characters\r\n    const cleaned = code.toUpperCase().replace(/[^A-Z0-9]/g, \"\");\r\n\r\n    // Check if all characters are valid\r\n    const validChars = new RegExp(`^[${CODE_CHARS}]{${CODE_LENGTH}}$`);\r\n    if (!validChars.test(cleaned)) {\r\n        throw new Error(\"Code contains invalid characters or incorrect length\");\r\n    }\r\n\r\n    return cleaned;\r\n} "],"names":[],"mappings":";;;;;;;AAAA;;AAGO,MAAM,aAAa;AACnB,MAAM,cAAc;AAMpB,eAAe;IAClB,IAAI,WAAW;IACf,MAAM,cAAc;IAEpB,MAAO,WAAW,YAAa;QAC3B,yBAAyB;QACzB,IAAI,OAAO;QACX,IAAK,IAAI,IAAI,GAAG,IAAI,aAAa,IAAK;YAClC,QAAQ,WAAW,MAAM,CAAC,KAAK,KAAK,CAAC,KAAK,MAAM,KAAK,WAAW,MAAM;QAC1E;QAEA,uBAAuB;QACvB,MAAM,WAAW,MAAM,qHAAA,CAAA,SAAM,CAAC,OAAO,CAAC,UAAU,CAAC;YAC7C,OAAO;gBAAE;YAAK;QAClB;QAEA,IAAI,CAAC,UAAU;YACX,OAAO;QACX;QAEA;IACJ;IAEA,MAAM,IAAI,MAAM;AACpB;AAOO,SAAS,mBAAmB,IAAY;IAC3C,MAAM,YAAY,KAAK,WAAW;IAClC,OAAO,gBAAgB,IAAI,CAAC;AAChC;AAMO,SAAS,kBAAkB,IAAY;IAC1C,kEAAkE;IAClE,MAAM,UAAU,KAAK,WAAW,GAAG,OAAO,CAAC,cAAc;IAEzD,oCAAoC;IACpC,MAAM,aAAa,IAAI,OAAO,CAAC,EAAE,EAAE,WAAW,EAAE,EAAE,YAAY,EAAE,CAAC;IACjE,IAAI,CAAC,WAAW,IAAI,CAAC,UAAU;QAC3B,MAAM,IAAI,MAAM;IACpB;IAEA,OAAO;AACX"}},
    {"offset": {"line": 130, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 136, "column": 0}, "map": {"version":3,"sources":["file://G%3A/_dev/hidden_path/arg-game/src/app/api/bookings/route.ts"],"sourcesContent":["import { NextResponse } from \"next/server\";\r\nimport { prisma } from \"~/server/db\";\r\nimport { z } from \"zod\";\r\nimport { generateUniqueBookingCode } from \"~/utils/booking-code\";\r\n\r\nconst createBookingSchema = z.object({\r\n    teamId: z.number(),\r\n    gameId: z.number(),\r\n    startTime: z.string().datetime().optional(),\r\n    expiresAt: z.string().datetime().optional(),\r\n    voucher: z.string().optional(),\r\n    paid: z.boolean().optional(),\r\n    notes: z.string().optional(),\r\n});\r\n\r\ntype CreateBookingInput = z.infer<typeof createBookingSchema>;\r\n\r\nexport async function POST(req: Request) {\r\n    try {\r\n        const body = (await req.json()) as CreateBookingInput;\r\n        const result = createBookingSchema.safeParse(body);\r\n\r\n        if (!result.success) {\r\n            return NextResponse.json(\r\n                { error: \"Invalid input\", details: result.error.flatten() },\r\n                { status: 400 }\r\n            );\r\n        }\r\n\r\n        const { teamId, gameId, startTime, expiresAt, voucher, paid, notes } = result.data;\r\n\r\n        // Generate a unique booking code\r\n        const code = await generateUniqueBookingCode();\r\n\r\n        // Create the booking\r\n        const booking = await prisma.booking.create({\r\n            data: {\r\n                team: { connect: { id: teamId } },\r\n                game: { connect: { id: gameId } },\r\n                code,\r\n                startTime: startTime ? new Date(startTime) : null,\r\n                expiresAt: expiresAt ? new Date(expiresAt) : null,\r\n                voucher,\r\n                paid: paid ?? false,\r\n                notes,\r\n            },\r\n            include: {\r\n                team: {\r\n                    select: {\r\n                        name: true,\r\n                    },\r\n                },\r\n                game: {\r\n                    select: {\r\n                        name: true,\r\n                    },\r\n                },\r\n            },\r\n        });\r\n\r\n        return NextResponse.json({ booking });\r\n    } catch (err) {\r\n        console.error(\"Error creating booking:\", err);\r\n        if (err instanceof Error) {\r\n            return NextResponse.json(\r\n                { error: err.message },\r\n                { status: 500 }\r\n            );\r\n        }\r\n        return NextResponse.json(\r\n            { error: \"Failed to create booking\" },\r\n            { status: 500 }\r\n        );\r\n    }\r\n}\r\n\r\nexport async function GET() {\r\n    try {\r\n        const bookings = await prisma.booking.findMany({\r\n            include: {\r\n                team: {\r\n                    select: {\r\n                        id: true,\r\n                        name: true,\r\n                    },\r\n                },\r\n                game: {\r\n                    select: {\r\n                        id: true,\r\n                        name: true,\r\n                    },\r\n                },\r\n                instance: {\r\n                    select: {\r\n                        startedAt: true,\r\n                        completedAt: true,\r\n                        currentPuzzleOrder: true,\r\n                    },\r\n                },\r\n            },\r\n            orderBy: {\r\n                createdAt: 'desc',\r\n            },\r\n        });\r\n\r\n        return NextResponse.json({ bookings });\r\n    } catch (err) {\r\n        console.error(\"Error fetching bookings:\", err);\r\n        if (err instanceof Error) {\r\n            return NextResponse.json(\r\n                { error: err.message },\r\n                { status: 500 }\r\n            );\r\n        }\r\n        return NextResponse.json(\r\n            { error: \"Failed to fetch bookings\" },\r\n            { status: 500 }\r\n        );\r\n    }\r\n} "],"names":[],"mappings":"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"}},
    {"offset": {"line": 271, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}