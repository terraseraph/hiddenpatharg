{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 71, "column": 0}, "map": {"version":3,"sources":["file://G%3A/_dev/hidden_path/arg-game/src/app/api/assets/route.ts"],"sourcesContent":["import { NextResponse } from \"next/server\";\r\nimport { promises as fs } from \"fs\";\r\nimport path from \"path\";\r\n\r\ninterface AssetFile {\r\n    name: string;\r\n    path: string;\r\n    type: \"image\" | \"audio\" | \"video\";\r\n    size: number;\r\n    modified: string;\r\n    url: string;\r\n}\r\n\r\nexport async function GET() {\r\n    try {\r\n        const assetTypes = [\"image\", \"audio\", \"video\"];\r\n        const assets: AssetFile[] = [];\r\n\r\n        for (const assetType of assetTypes) {\r\n            const dir = path.join(process.cwd(), \"public\", \"assets\", assetType);\r\n            try {\r\n                const files = await fs.readdir(dir);\r\n\r\n                for (const file of files) {\r\n                    const filePath = path.join(dir, file);\r\n                    const stats = await fs.stat(filePath);\r\n\r\n                    if (stats.isFile()) {\r\n                        assets.push({\r\n                            name: file,\r\n                            path: filePath,\r\n                            type: assetType as \"image\" | \"audio\" | \"video\",\r\n                            size: stats.size,\r\n                            modified: stats.mtime.toISOString(),\r\n                            url: `/assets/${assetType}/${file}`,\r\n                        });\r\n                    }\r\n                }\r\n            } catch (error) {\r\n                console.error(`Error reading ${assetType} directory:`, error);\r\n            }\r\n        }\r\n\r\n        return NextResponse.json({ assets });\r\n    } catch (error) {\r\n        console.error(\"Error fetching assets:\", error);\r\n        return NextResponse.json(\r\n            { error: \"Error fetching assets\" },\r\n            { status: 500 }\r\n        );\r\n    }\r\n} "],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AAWO,eAAe;IAClB,IAAI;QACA,MAAM,aAAa;YAAC;YAAS;YAAS;SAAQ;QAC9C,MAAM,SAAsB,EAAE;QAE9B,KAAK,MAAM,aAAa,WAAY;YAChC,MAAM,MAAM,iGAAA,CAAA,UAAI,CAAC,IAAI,CAAC,QAAQ,GAAG,IAAI,UAAU,UAAU;YACzD,IAAI;gBACA,MAAM,QAAQ,MAAM,6FAAA,CAAA,WAAE,CAAC,OAAO,CAAC;gBAE/B,KAAK,MAAM,QAAQ,MAAO;oBACtB,MAAM,WAAW,iGAAA,CAAA,UAAI,CAAC,IAAI,CAAC,KAAK;oBAChC,MAAM,QAAQ,MAAM,6FAAA,CAAA,WAAE,CAAC,IAAI,CAAC;oBAE5B,IAAI,MAAM,MAAM,IAAI;wBAChB,OAAO,IAAI,CAAC;4BACR,MAAM;4BACN,MAAM;4BACN,MAAM;4BACN,MAAM,MAAM,IAAI;4BAChB,UAAU,MAAM,KAAK,CAAC,WAAW;4BACjC,KAAK,CAAC,QAAQ,EAAE,UAAU,CAAC,EAAE,MAAM;wBACvC;oBACJ;gBACJ;YACJ,EAAE,OAAO,OAAO;gBACZ,QAAQ,KAAK,CAAC,CAAC,cAAc,EAAE,UAAU,WAAW,CAAC,EAAE;YAC3D;QACJ;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE;QAAO;IACtC,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,0BAA0B;QACxC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACpB;YAAE,OAAO;QAAwB,GACjC;YAAE,QAAQ;QAAI;IAEtB;AACJ"}},
    {"offset": {"line": 122, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}