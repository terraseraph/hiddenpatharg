// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model User {
  id          Int      @id @default(autoincrement())
  email       String   @unique
  name        String?
  solvedPuzzles Puzzle[] @relation("PuzzleSolvers")
  accounts    Account[]
  sessions    Session[]
}

model Game {
  id          Int       @id @default(autoincrement())
  name        String
  description String
  puzzles     Puzzle[]
  bookings    Booking[]
  instances   GameInstance[]
}

model Puzzle {
  id           Int      @id @default(autoincrement())
  gameId       Int
  game         Game     @relation(fields: [gameId], references: [id])
  type         String   // One of: input, multiple_choice, qrcode, image, location
  question     String
  answer       String
  order        Int
  solvedBy     User[]   @relation("PuzzleSolvers")
  locationData String?  // For location-based puzzles
  imageUrl     String?  // For image-based puzzles
  choices      String?  // JSON string of choices for multiple choice puzzles
}

model Team {
  id             Int       @id @default(autoincrement())
  name           String
  players        String    // JSON string of Player objects
  bookings       Booking[]
  gameInstances  GameInstance[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             Int
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  user               User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Booking {
    id        Int      @id @default(autoincrement())
    teamId    Int
    team      Team     @relation(fields: [teamId], references: [id])
    gameId    Int
    game      Game     @relation(fields: [gameId], references: [id])
    code      String   @unique // This is the code players will enter
    createdAt DateTime @default(now())
    startTime DateTime?
    expiresAt DateTime?
    voucher   String?
    paid      Boolean  @default(false)
    notes     String?
    instance  GameInstance?
}

model GameInstance {
    id          Int      @id @default(autoincrement())
    teamId      Int
    team        Team     @relation(fields: [teamId], references: [id])
    gameId      Int
    game        Game     @relation(fields: [gameId], references: [id])
    bookingId   Int      @unique
    booking     Booking  @relation(fields: [bookingId], references: [id])
    startedAt   DateTime @default(now())
    completedAt DateTime?
    currentPuzzleOrder Int @default(1)
    solvedPuzzles String? // JSON string of solved puzzle IDs and timestamps
}